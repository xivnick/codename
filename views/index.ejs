<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" type="text/css" href="/css/codename.css"/>
    <title>Vodka Codename</title>
</head>
<body>

<div id="content">
    <a @click="resetCards()">리셋</a> <br>
    turn : {{turn}} <br>
    win : {{win}} <br>
    <template v-if="name">
        {{name}}님, 환영합니다! <a @click="logout()">로그아웃</a><br>
        <a @click="postTeam('red','master')">레드팀 팀장</a>
        <a @click="postTeam('red','player')">레드팀 팀원</a>
        <a @click="postTeam('blue','master')">블루팀 팀장</a>
        <a @click="postTeam('blue','player')">블루팀 팀원</a>
    </template>
    <div id="cards">
        <template v-for="card in cards">
            <div class="card-wrapper">
                <div class="card-cover" v-if="card.covered" :class="card.type" @click=""></div>

                <div class="card" v-if="master || win" :class="card.type">
                    <span>{{ card.word }}</span>
                </div>
                <div class="card" v-else-if="card.covered">
                    <span>{{ card.word }}</span>
                </div>
                <div class="card"  v-else>
                    <span>{{ card.word }}</span>
                    <a class="open-button" @click="pickCard(card.id)">Pick!</a>
                </div>
            </div>
        </template>
    </div>
    <template v-for="log in logs">
        {{log}}<br>
    </template>
</div>

</body>

<script>
    const content = new Vue({
        el: '#content',
        data: {
            cards: [],
            turn: null,
            win: null,
            name: null,
            master: false,
            logs: [],
            team: null,
            type: null,
        },
        created() {
            this.updateGameData();

            const socket = io();

            socket.on('connection', () => {

                let name = getCookie('codename_username');
                while(name === null || name === ''){
                    name = prompt('이름을 입력해주세요.');
                }
                this.name = name;
                setCookie('codename_username', name, 1);
                socket.emit('join', name);
            });
        },
        methods: {
            updateGameData() {
                axios.get('/api/game')
                .then((res) => {
                    const game = res.data.game;

                    this.cards = game.cardList.cards;
                    this.turn = game.turn;
                    this.win = game.win;

                    this.logs = game.logs;
                })
                .catch((err) => {
                    console.log(err);
                })
            },
            async pickCard(id) {
                await axios.post('/api/card/pick', {
                    userName: this.name,
                    cardID: id,
                }).then((res) => {
                    console.log(res);
                }).catch((err) => {
                    console.log(err);
                });

                this.updateGameData();
            },
            async resetCards() {
                await axios.post('/api/cards/reset')
                    .then((res) => {
                        // console.log(res);
                    }).catch((err) => {
                        console.log(err);
                    });
                this.updateGameData();
            },
            logout() {
                deleteCookie('codename_username');
                location.reload();
            },
            async postTeam(team, type) {
                await axios.post('/api/user/team', {
                    username: this.name,
                    team,
                    type,
                }).then((res) => {
                    // console.log(res);
                }).catch((err) => {
                    console.log(err);
                });

                this.updateGameData();
            },
        },
    })
</script>
<script>
    const setCookie = (name, value, exp) => {
        const date = new Date();
        date.setTime(date.getTime() + exp*24*60*60*1000);
        document.cookie = name + '=' + value + ';expires=' + date.toUTCString() + ';path=/';
    };
    const getCookie = (name) => {
        const value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
        return value?value[2]:null;
    };
    const deleteCookie = (name) => {
        document.cookie = name + '=; expires=Thu, 01 Jan 1999 00:00:10 GMT;';
    }
</script>
</html>